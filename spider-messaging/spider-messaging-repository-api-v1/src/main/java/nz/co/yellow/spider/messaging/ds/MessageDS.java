package nz.co.yellow.spider.messaging.ds;

import java.util.List;

import nz.co.yellow.spider.messaging.data.MessageReq;
import nz.co.yellow.spider.messaging.data.MessageResp;
import nz.co.yellow.spider.messaging.data.MessageThreadReq;
import nz.co.yellow.spider.messaging.data.MessageThreadResp;
import nz.co.yellow.spider.messaging.data.ThreadMsgLoadStrategies;

/**
 * SpiderMessage domain services that work with an
 * {@link nz.co.yellow.spider.messaging.MessageThread}.
 * 
 * @author david
 * 
 */
public interface MessageDS {
	/**
	 * Handles the Thread creation logic. If the
	 * {@link nz.co.yellow.spider.messaging.MessageThread} can be created. In
	 * all other cases we get a {@link Exception}.
	 * 
	 * @param msgThread
	 *            , after created successfully, we get updated msgThread with id
	 * @return the sequenceId generated by database
	 * @throws Exception
	 */
	MessageThreadResp createMsgThread(MessageThreadReq threadDto)
			throws Exception;

	/**
	 * the logic to add a message and a participant to existed Thread. if the
	 * {@link nz.co.yellow.spider.messaging.MessageThread} not found,
	 * 
	 * @param msgThreadId
	 * @param message
	 * @param participant
	 * @throws NotFoundException
	 */
	MessageResp addMessageToThread(MessageReq messageDto) throws Exception;

	/**
	 * the logic to get MessageThread according to load strategies
	 * {@ThreadMsgLoadStrategies}. if the
	 * {@link nz.co.yellow.spider.messaging.MessageThread} not found, we get a
	 * {@link NotFoundException} .
	 * 
	 * @param msgThreadId
	 * @return
	 * @throws NotFoundException
	 */
	MessageThreadResp getMsgThreadById(Long threadId,
			ThreadMsgLoadStrategies loadStrategies) throws Exception;

	MessageThreadResp updateMessageThreadStatus(Long threadId, String status)
			throws Exception;

	MessageResp updateMessageReadTimeAndStatus(Long messageId, String readTime,
			String status) throws Exception;

	List<MessageResp> getMessageByThreadIdAndParticipantUserId(
			Long messageThreadId, String userId) throws Exception;

}
